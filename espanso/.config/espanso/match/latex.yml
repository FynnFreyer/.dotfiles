# LaTeX stuff
#
# Loosely based on Ivan Bue's (@soulllink) work.
# Cf. https://hub.espanso.org/common-latex

# some programs insert matching parens/brackets/braces,
# so force_clipboard is used in cases where that's a problem

global_vars:
  # not so useful rn, but maybe later
  # see: https://github.com/espanso/espanso/discussions/1753
  - name: content
    type: echo
    params:
      echo: $|$

matches:
  - regex: ':(?P<format>bb|bf|rm|it|normal|cal|scr|frak)'
    replace: '\math{{format}}{{{content}}}'
    label: 'Use various LaTeX math formattings. (bb|rm|it|normal|cal|scr|frak)'

  - regex: ':in(?P<format>bb|rm|it|normal|cal|scr|frak)'
    replace: '\in \math{{format}}{{{content}}}'
    label: 'Member of a Set with formatted name. Like "\in \math(bb|rm|...){}".'

  - regex: ':set'
    replace: '\{{{content}}\}'
    label: 'A set.'

  - regex: ':(?P<left>[\w\d]{1,2})x(?P<right>[\w\d]{1,2})'
    replace: '{{left}} \times {{right}}'
    label: 'Rule for cross products, like "n \times m".'

  - trigger: ':to'
    force_clipboard: true  # needed for caret (^)
    replace: '^{{{content}}}'
    label: 'To the power.'

  - trigger: ':inv'
    force_clipboard: true  # needed for caret (^)
    replace: '^{-1}'
    label: 'The inverse of.'

  - trigger: ':trans'
    force_clipboard: true  # needed for caret (^)
    replace: '^{\top}'
    label: 'The transpose of.'

  - trigger: ':idx'
    replace: '_{{{content}}}'
    label: 'The index of.'

  - trigger: ':pq'
    force_clipboard: true  # needed for caret (^)
    replace: >
      {{values.var}}_0, {{values.var}}_1 = 
      - \frac{{{values.p}}}{{{values.q}}} 
      \pm 
      \sqrt{\left(\frac{{{values.p}}}{2}\right)^2 - {{values.q}}}
    vars:
      - name: values
        type: form
        params:
          layout: "p: [[p]]\nq: [[q]]\nlooking for: [[var]]"
          fields:
            var:
              default: x
            p:
              default: p
            q:
              default: q

  - trigger: ':lrp'
    label: Left and right scaled parens.
    replace: '\left( {{content}} \right)'

  - trigger: ':lrb'
    label: Left and right scaled brackets.
    replace: '\left[ {{content}} \right]'

  - trigger: ':floor'
    label: Floor function, rounds down.
    replace: '\lfloor {{content}} \rfloor'

  - trigger: ':ceil'
    label: Ceiling function, rounds up.
    replace: '\lceil {{content}} \rceil'

  - trigger: ':angle'
    label: Angles. E.g., for inner products.
    replace: '\langle {{content}} \rangle'

  - regex: ':lr(?P<left_sign>[(\[{|])(?P<right_sign>[)\]}|])'
    replace: '\left{{left_sign}} {{content}} \right{{right_sign}}'
    label: Arbitrary left and right scaled symbols.

  - trigger: ':larr'
    label: Left arrow.
    replace: '\leftarrow'

  - trigger: ':rarr'
    label: Right arrow.
    replace: '\rightarrow'

  - trigger: ':lrarr'
    label: Left-right arrow.
    replace: '\leftrightarrow'

  - trigger: ':fr'
    label: Fraction.
    replace: '\frac{{{content}}}{}'

  - trigger: ':ov'
    label: Horizontal line.
    replace: '\over'

  - trigger: ':sq'
    label: A square root.
    replace: '\sqrt{{{content}}}'

  - trigger: ':log'
    label: A logarithm.
    replace: '\log_{{{content}}}'

  - trigger: ':lim'
    label: Limit of a function.
    force_clipboard: true  # needed for caret (^)
    replace: '\lim\limits_{x \to $|$\infty}'

  - trigger: ':sum'
    label: A sum with limits.
    force_clipboard: true  # needed for caret (^)
    replace: '\sum_{i = 1$|$}^{n}'

  - trigger: ':cup'
    label: Union of sets.
    force_clipboard: true  # needed for caret (^)
    replace: '\bigcup_{i = 1$|$}^{n} A_i'

  - trigger: ':cap'
    label: Intersection of sets.
    force_clipboard: true  # needed for caret (^)
    replace: '\bigcap_{i = 1$|$}^{n} A_i'

  - trigger: ':disp'
    label: Enter the displaylines env. Useful for MathJax.
    force_clipboard: true  # needed to avoid duplicate braces
    replace: |
      \displaylines{
      {{content}}
      }

  - trigger: ':tex'
    label: A text field.
    replace: '\text{{{content}}}'

  - trigger: ':eq'
    label: Enter the equation and split environments. Split allows for alignment with "&".
    force_clipboard: true  # needed to avoid stacking indent
    replace: |
      \begin{equation}
          \begin{split}
              {{content}}
          \end{split}
      \end{equation}

  - trigger: ':inf'
    label: Define an inference rule.
    force_clipboard: true  # needed to avoid stacking indent
    replace: |
      \begin{array}{l}
          p{{content}}  \\
          \hline
          q
      \end{array}

  - regex: ':(?P<count>\d?)(?P<type>[d]?)cases'
    label: Enter the cases environment for functions that return stuff based on conditions.
    force_clipboard: true  # needed to avoid stacking indent
    replace: |
      \begin{{{type}}cases}
          {{cases}}
      \end{{{type}}cases}
    vars:
      - name: cases
        type: script
        params:
          args:
            - python
            - '%CONFIG%/scripts/cases.py'
            - '{{count}}'

  - regex: ':env(?P<environ>[a-z]+)[^a-z]'
    force_clipboard: true  # needed to avoid duplicate braces
    label: Enter an arbitrary environment.
    replace: |
      \begin{{{environ}}}
          {{content}}
      \end{{{environ}}}

  # see types of matrices here: https://www.overleaf.com/learn/latex/Matrices
  - regex: ':(?P<type>[pbBvV]?)mat(?P<rows>\d+)x(?P<cols>\d+)[^\d]'
    label: Generate an M by N matrix of a certain type (p|b|B|v|V). Use like so :<type>mat<rows>x<cols>.
    force_clipboard: true  # needed to avoid stacking indent
    replace: |-
        \begin{{{type}}matrix}
            {{matrix}}
        \end{{{type}}matrix}
    vars:
      - name: matrix
        type: script
        params:
          args:
            - python
            - '%CONFIG%/scripts/matrix.py'
            - '{{rows}}'
            - '{{cols}}'

  - regex: ':smat(?P<rows>\d+)x(?P<cols>\d+)[^\d]'
    label: Generate a small M by N matrix for inline display.
    replace: '\left(\begin{smallmatrix} {{matrix}} \end{smallmatrix}\right)'
    vars:
      - name: matrix
        type: script
        params:
          args:
            - python
            - '%CONFIG%/scripts/matrix.py'
            - '--inline'
            - '--unindented'
            - '{{rows}}'
            - '{{cols}}'

  - regex: ':vec(?P<symbol>[a-zA-Z])'
    label: A vector arrow over a symbol.
    replace: '\vec{{{symbol}}}'

  - regex: ':(?P<type>[pbBvV]?)vec(?P<dim>\d+)[^\d]'
    label: A vector.
    replace: '\begin{{{type}}matrix} {{vec}} \end{{{type}}matrix}'
    vars:
      - name: vec
        type: script
        params:
          args:
            - python
            - '%CONFIG%/scripts/matrix.py'
            - '--inline'
            - '--unindented'
            - '{{dim}}'
            - '1'

  - regex: ':horner(?P<degree>\d+)(?:-(?P<root>[\\\da-zA-Z_]+))?[^\d-]'
    label: |-
        Generate a template to do polynome division via Horner's scheme.
        Use like so :horner<degree>(-<root>).
        Degree is an integer and root is optional and can be any string without hyphen.
    force_clipboard: true  # needed to avoid stacking indent
    replace: "{{horner}}"
    vars:
      - name: horner
        type: script
        params:
          args:
            - python
            - '%CONFIG%/scripts/horner.py'
            - '{{degree}}'

